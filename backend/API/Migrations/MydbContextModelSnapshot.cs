// <auto-generated />
using System;
using ApiQUIZZ.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiQUIZZ.Migrations
{
    [DbContext(typeof(MydbContext))]
    partial class MydbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiQUIZZ.Models.Alternativa", b =>
                {
                    b.Property<int>("IdAlt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ALT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlt"));

                    b.Property<bool>("Correto")
                        .HasColumnType("bit")
                        .HasColumnName("CORRETO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("IdPerg")
                        .HasColumnType("int")
                        .HasColumnName("ID_PERG");

                    b.HasKey("IdAlt")
                        .HasName("PK__ALTERNAT__2A7C970019DD996E");

                    b.HasIndex("IdPerg");

                    b.ToTable("ALTERNATIVA", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Disciplina", b =>
                {
                    b.Property<int>("IdDisciplina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_DISCIPLINA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDisciplina"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("DESCRICAO");

                    b.Property<int>("IdQuizzes")
                        .HasColumnType("int")
                        .HasColumnName("ID_QUIZZES");

                    b.Property<int>("IdTurma")
                        .HasColumnType("int")
                        .HasColumnName("ID_TURMA");

                    b.HasKey("IdDisciplina")
                        .HasName("PK__DISCIPLI__2CDBBFD7AE1710BC");

                    b.HasIndex("IdQuizzes");

                    b.HasIndex("IdTurma");

                    b.ToTable("DISCIPLINA", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Nota", b =>
                {
                    b.Property<int>("IdNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_NOTA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNota"));

                    b.Property<DateTime?>("DataNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_NOTA")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdQuizzes")
                        .HasColumnType("int")
                        .HasColumnName("ID_QUIZZES");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("VALOR");

                    b.HasKey("IdNota")
                        .HasName("PK__NOTAS__AB084D7CD1D5B30A");

                    b.HasIndex("IdQuizzes");

                    b.HasIndex("IdUsuario");

                    b.ToTable("NOTAS", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Pergunta", b =>
                {
                    b.Property<int>("IdPerg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PERG");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerg"));

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ENUNCIADO");

                    b.Property<int>("IdQuiz")
                        .HasColumnType("int")
                        .HasColumnName("ID_QUIZ");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMG");

                    b.Property<decimal>("Pontos")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("PONTOS");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TIPO")
                        .IsFixedLength();

                    b.HasKey("IdPerg")
                        .HasName("PK__PERGUNTA__BD9558F4358A7E21");

                    b.HasIndex("IdQuiz");

                    b.ToTable("PERGUNTAS", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Quiz", b =>
                {
                    b.Property<int>("IdQuizzes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_QUIZZES");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuizzes"));

                    b.Property<DateTime>("DatCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DAT_CRIACAO")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("TITULO");

                    b.HasKey("IdQuizzes")
                        .HasName("PK__QUIZZES__5F6DBDB5A0DDBF18");

                    b.ToTable("QUIZZES", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Resposta", b =>
                {
                    b.Property<int>("IdResp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RESP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResp"));

                    b.Property<int>("IdAlt")
                        .HasColumnType("int")
                        .HasColumnName("ID_ALT");

                    b.Property<int>("IdPerg")
                        .HasColumnType("int")
                        .HasColumnName("ID_PERG");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("Texto")
                        .HasColumnType("text")
                        .HasColumnName("TEXTO");

                    b.HasKey("IdResp")
                        .HasName("PK__RESPOSTA__C857B8C148EED21F");

                    b.HasIndex("IdAlt");

                    b.HasIndex("IdPerg");

                    b.HasIndex("IdUsuario");

                    b.ToTable("RESPOSTAS", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Turma", b =>
                {
                    b.Property<int>("IdTurma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TURMA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTurma"));

                    b.Property<DateTime?>("DatCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DAT_CRIACAO")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    b.Property<byte[]>("Img")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMG");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NOME");

                    b.HasKey("IdTurma")
                        .HasName("PK__TURMAS__F1C3C0A5BC8297FB");

                    b.HasIndex("IdUsuario");

                    b.ToTable("TURMAS", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SENHA");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TIPO")
                        .IsFixedLength();

                    b.HasKey("IdUsuario")
                        .HasName("PK__USUARIO__91136B90ECA3AD26");

                    b.HasIndex(new[] { "Email" }, "UQ__USUARIO__161CF7243827440D")
                        .IsUnique();

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Alternativa", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Pergunta", "IdPergNavigation")
                        .WithMany("Alternativas")
                        .HasForeignKey("IdPerg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ALT_PERG");

                    b.Navigation("IdPergNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Disciplina", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Quiz", "IdQuizzesNavigation")
                        .WithMany("Disciplinas")
                        .HasForeignKey("IdQuizzes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DISCIPLINA_QUIZZES");

                    b.HasOne("ApiQUIZZ.Models.Turma", "IdTurmaNavigation")
                        .WithMany("Disciplinas")
                        .HasForeignKey("IdTurma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DISCIPLINA_TURMAS");

                    b.Navigation("IdQuizzesNavigation");

                    b.Navigation("IdTurmaNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Nota", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Quiz", "IdQuizzesNavigation")
                        .WithMany("Nota")
                        .HasForeignKey("IdQuizzes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NOTAS_QUIZZES");

                    b.HasOne("ApiQUIZZ.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Nota")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NOTAS_USUARIO");

                    b.Navigation("IdQuizzesNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Pergunta", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Quiz", "IdQuizNavigation")
                        .WithMany("Pergunta")
                        .HasForeignKey("IdQuiz")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PERGUNTAS_QUIZZES");

                    b.Navigation("IdQuizNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Resposta", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Alternativa", "IdAltNavigation")
                        .WithMany("Resposta")
                        .HasForeignKey("IdAlt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RESP_ALT");

                    b.HasOne("ApiQUIZZ.Models.Pergunta", "IdPergNavigation")
                        .WithMany("Resposta")
                        .HasForeignKey("IdPerg")
                        .IsRequired()
                        .HasConstraintName("FK_RESP_PERG");

                    b.HasOne("ApiQUIZZ.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Resposta")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_RESP_USUARIO");

                    b.Navigation("IdAltNavigation");

                    b.Navigation("IdPergNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Turma", b =>
                {
                    b.HasOne("ApiQUIZZ.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Turmas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TURMAS_USUARIO");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Alternativa", b =>
                {
                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Pergunta", b =>
                {
                    b.Navigation("Alternativas");

                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Quiz", b =>
                {
                    b.Navigation("Disciplinas");

                    b.Navigation("Nota");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Turma", b =>
                {
                    b.Navigation("Disciplinas");
                });

            modelBuilder.Entity("ApiQUIZZ.Models.Usuario", b =>
                {
                    b.Navigation("Nota");

                    b.Navigation("Resposta");

                    b.Navigation("Turmas");
                });
#pragma warning restore 612, 618
        }
    }
}
